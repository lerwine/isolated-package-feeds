{
    "Define LoggerMessage w/no args": {
        "prefix": "logger-message0",
        "scope": "csharp",
        "body": [
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1:EventName}\"/> <see cref=\"LogLevel.${2|Error,Warning,Information,Trace,Debug|}\"/> message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${2},",
            "    Message = \"${3:Message}${0}\")]",
            "public static partial void ${1}(this ILogger logger, Exception? exception = null);"
        ],
        "description": "Create Logger Message definition with no extra arguments and LogLevel"
    },
    "Define LoggerMessage Factory w/no args": {
        "prefix": "logger-get-message0",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message.}${0}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = MESSAGE_${1})]",
            "private static partial void Log${1}(ILogger logger, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, Exception? exception = null)",
            "{",
			"    Log${1}(logger, exception);",
			"    return MESSAGE_${1};",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and message factory with no extra arguments and LogLevel"
    },
    "Define LoggerMessage Exception Factory w/no args": {
        "prefix": "logger-exception0",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message.}${0}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = MESSAGE_${1}})]",
            "private static partial void Log${1}(ILogger logger, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T ${1}<T>(this ILogger logger, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and exception factory with no extra arguments and LogLevel"
    },
    "Define LoggerMessage w/1 arg": {
        "prefix": "logger-message1",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1:EventName}\"/> <see cref=\"LogLevel.${2|Error,Warning,Information,Trace,Debug|}\"/> message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3:paramName}\">${4:The event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${2},",
            "    Message = \"${5:Message}${0} (${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${6:ParamType} ${3}, Exception? exception = null);"
		],
		"description": "Create Logger Message definition with 1 extra argument and LogLevel"
    },
    "Define LoggerMessage Factory w/1 arg": {
        "prefix": "logger-get-message1",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:ParamName}={{${4}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${5:ParamType} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${6:The event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, ${5} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
			"    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and message factory with 1 extra argument and LogLevel"
    },
    "Define LoggerMessage Exception Factory w/1 arg": {
        "prefix": "logger-exception1",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message.}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:ParamName}={{${4}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${5:ParamType} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${6:The event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T ${1}<T>(this ILogger logger, ${5} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and exception factory with 1 extra argument and LogLevel"
    },
    "Define LoggerMessage w/2 args": {
        "prefix": "logger-message2",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1:EventName}\"/> <see cref=\"LogLevel.${2|Error,Warning,Information,Trace,Debug|}\"/> message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3:param1Name}\">${4:The first event parameter.}</param>",
            "/// <param name=\"${5:param2Name}\">${6:The second event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${2},",
            "    Message = \"${7:Message}${0} (${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${8:Param1Type} ${3}, ${9:Param2Type} ${5}, Exception? exception = null);"
		],
		"description": "Create Logger Message definition with 2 extra arguments and LogLevel"
    },
    "Define LoggerMessage Factory w/2 args": {
        "prefix": "logger-get-message2",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${6:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${9:The second event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, ${6} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
			"    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and message factory with 2 extra arguments and LogLevel"
    },
    "Define LoggerMessage Exception Factory w/2 args": {
        "prefix": "logger-exception2",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${6:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${9:The second event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T ${1}<T>(this ILogger logger, ${6} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);"
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and exception factory with 2 extra arguments and LogLevel"
    },
    "Define LoggerMessage w/3 args": {
        "prefix": "logger-message3",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1:EventName}\"/> <see cref=\"LogLevel.${2|Error,Warning,Information,Trace,Debug|}\"/> message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3:param1Name}\">${4:The first event parameter.}</param>",
            "/// <param name=\"${5:param2Name}\">${6:The second event parameter.}</param>",
            "/// <param name=\"${7:param3Name}\">${8:The third event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${2},",
            "    Message = \"${9:Message}${0} (${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${7/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${7/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${10:Param1Type} ${3}, ${11:Param2Type} ${5}, ${12:Param3Type} ${7}, Exception? exception = null);"
		],
		"description": "Create Logger Message definition with 3 extra arguments and LogLevel"
    },
    "Define LoggerMessage Factory w/3 args": {
        "prefix": "logger-get-message3",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}; ${6:Param3Name}={{${6}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${7:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9:Param3Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${10:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The second event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${12:The third event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, ${7} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
			"    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and message factory with 3 extra arguments and LogLevel"
    },
    "Define LoggerMessage Exception Factory w/3 args": {
        "prefix": "logger-exception3",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}; ${6:Param3Name}={{${6}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${7:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9:Param3Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${10:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The second event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${12:The third event parameter.}</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T Log${1}<T>(this ILogger logger, ${7} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and exception factory with 3 extra arguments and LogLevel"
    },
    "Define LoggerMessage w/4 args": {
        "prefix": "logger-message4",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1:EventName}\"/> <see cref=\"LogLevel.${2|Error,Warning,Information,Trace,Debug|}\"/> message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3:param1Name}\">${4:The first event parameter.}</param>",
            "/// <param name=\"${5:param2Name}\">${6:The second event parameter.}</param>",
            "/// <param name=\"${7:param3Name}\">${8:The third event parameter.}</param>",
            "/// <param name=\"${9:param4Name}\">${10:The fourth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${2},",
            "    Message = \"${11:Message}${0} (${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${7/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${7/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${9/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${9/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${12:Param1Type} ${3}, ${13:Param2Type} ${5}, ${14:Param3Type} ${7}, ${15:Param4Type} ${9}, Exception? exception = null);"
		],
		"description": "Create Logger Message definition with 4 extra arguments and LogLevel"
    },
    "Define LoggerMessage Factory w/4 args": {
        "prefix": "logger-get-message4",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}; ${6:Param3Name}={{${6}}}; ${7:Param4Name}={{${7}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${8:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param3Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param4Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${12:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The second event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The third event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The fourth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, ${8} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
			"    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and message factory with 4 extra arguments and LogLevel"
    },
    "Define LoggerMessage Exception Factory w/4 args": {
        "prefix": "logger-exception4",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}; ${6:Param3Name}={{${6}}}; ${7:Param4Name}={{${7}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${8:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param3Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param4Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${12:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The second event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The third event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The fourth event parameter.}</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T Log${1}<T>(this ILogger logger, ${8} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and exception factory with 4 extra arguments and LogLevel"
    },
    "Define LoggerMessage w/5 args": {
        "prefix": "logger-message5",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1:EventName}\"/> <see cref=\"LogLevel.${2|Error,Warning,Information,Trace,Debug|}\"/> message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3:param1Name}\">${4:The first event parameter.}</param>",
            "/// <param name=\"${5:param2Name}\">${6:The second event parameter.}</param>",
            "/// <param name=\"${7:param3Name}\">${8:The third event parameter.}</param>",
            "/// <param name=\"${9:param4Name}\">${10:The fourth event parameter.}</param>",
            "/// <param name=\"${11:param5Name}\">${12:The fifth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${2},",
            "    Message = \"${13:Message}${0} (${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${7/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${7/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${9/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${9/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${11/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${11/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${14:Param1Type} ${3}, ${15:Param2Type} ${5}, ${16:Param3Type} ${7}, ${17:Param4Type} ${9}, ${18:Param5Type} ${11}, Exception? exception = null);"
		],
		"description": "Create Logger Message definition with 5 extra arguments and LogLevel"
    },
    "Define LoggerMessage Factory w/5 args": {
        "prefix": "logger-get-message5",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
            "private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${2|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}; ${6:Param3Name}={{${6}}}; ${7:Param4Name}={{${7}}}; ${8:Param5Name}={{${8}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${9:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param3Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12:Param4Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13:Param5Type} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${2}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The second event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The third event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The fourth event parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The fifth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
            "public static string ${1}(this ILogger logger, ${9} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
            "    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and message factory with 5 extra arguments and LogLevel"
    },
    "Define LoggerMessage Exception Factory w/5 args": {
        "prefix": "logger-exception5",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
            "private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}; ${6:Param3Name}={{${6}}}; ${7:Param4Name}={{${7}}}; ${8:Param5Name}={{${8}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${9:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param3Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12:Param4Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13:Param5Type} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The second event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The third event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The fourth event parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The fifth event parameter.}</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T Log${1}<T>(this ILogger logger, ${9} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
            "    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and exception factory with 5 extra arguments and LogLevel"
    },
    "Define LoggerMessage w/6 args": {
        "prefix": "logger-message6",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1:EventName}\"/> <see cref=\"LogLevel.${2|Error,Warning,Information,Trace,Debug|}\"/> message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3:param1Name}\">${4:The first event parameter.}</param>",
            "/// <param name=\"${5:param2Name}\">${6:The second event parameter.}</param>",
            "/// <param name=\"${7:param3Name}\">${8:The third event parameter.}</param>",
            "/// <param name=\"${9:param4Name}\">${10:The fourth event parameter.}</param>",
            "/// <param name=\"${11:param5Name}\">${12:The fifth event parameter.}</param>",
            "/// <param name=\"${13:param6Name}\">${14:The sixth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${2},",
            "    Message = \"${13:Message}${0} (${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${3/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${7/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${7/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${9/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${9/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${11/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${11/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${13/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${13/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${16:Param1Type} ${3}, ${17:Param2Type} ${5}, ${18:Param3Type} ${7}, ${19:Param4Type} ${9}, ${20:Param5Type} ${11}, ${21:Param6Type} ${16}, Exception? exception = null);"
		],
		"description": "Create Logger Message definition with 6 extra arguments and LogLevel"
    },
    "Define LoggerMessage Factory w/6 args": {
        "prefix": "logger-get-message6",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
            "private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}; ${6:Param3Name}={{${6}}}; ${7:Param4Name}={{${7}}}; ${8:Param5Name}={{${8}}}; ${9:Param6Name}={{${9}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${10:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12:Param3Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13:Param4Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14:Param5Type} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${15:Param6Type} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The second event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The third event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${19:The fourth event parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${20:The fifth event parameter.}</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${21:The sixth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
            "public static string ${1}(this ILogger logger, ${10} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${15} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
            "    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and message factory with 6 extra arguments and LogLevel."
    },
    "Define LoggerMessage Exception Factory w/6 args": {
        "prefix": "logger-exception6",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
            "private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.${3|Error,Warning,Information,Trace,Debug|}, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${4:Param1Name}={{${4}}}; ${5:Param2Name}={{${5}}}; ${6:Param3Name}={{${6}}}; ${7:Param4Name}={{${7}}}; ${8:Param5Name}={{${8}}}; ${9:Param6Name}={{${9}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${10:Param1Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param2Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12:Param3Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13:Param4Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14:Param5Type} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${15:Param6Type} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"AppEventId.${1}\"/> <see cref=\"LogLevel.${3}\"/> event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The first event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The second event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The third event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${19:The fourth event parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${20:The fifth event parameter.}</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${21:The sixth event parameter.}</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T Log${1}<T>(this ILogger logger, ${10} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${15} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
            "    Log${1}(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition and exception factory with 6 extra arguments and LogLevel."
    },
    "Define Critical LoggerMessage w/no args": {
        "prefix": "logger-message0-c",
        "scope": "csharp",
        "body": [
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1:EventName}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical,",
            "    Message = \"${2:Message}${0}\")]",
            "public static partial void ${1}(this ILogger logger, Exception? exception = null);"
        ],
        "description": "Create Critical Logger Error Message definition with no extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Factory w/no args": {
        "prefix": "logger-get-message0-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message.}${0}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = MESSAGE_${1})]",
            "private static partial void Log${1}(ILogger logger, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, Exception? exception = null)",
            "{",
			"    Log${1}(logger, exception);",
			"    return MESSAGE_${1};",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and message factory with no extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Exception Factory w/no args": {
        "prefix": "logger-exception0-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message.}${0}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = MESSAGE_${1}})]",
            "private static partial void Log${1}(ILogger logger, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T ${1}<T>(this ILogger logger, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and exception factory with no extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage w/1 arg": {
        "prefix": "logger-message1-c",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1:EventName}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${2:paramName}\">${3:The event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical,",
            "    Message = \"${4:Message}${0} (${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${5:ParamType} ${2}, Exception? exception = null);"
		],
		"description": "Create Critical Logger Error Message definition with 1 extra argument and LogLevel"
    },
    "Define Critical LoggerMessage Factory w/1 arg": {
        "prefix": "logger-get-message1-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:ParamName}={{${3}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${4:ParamType} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5:The event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, ${4} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
			"    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and message factory with 1 extra argument and LogLevel"
    },
    "Define Critical LoggerMessage Exception Factory w/1 arg": {
        "prefix": "logger-exception1-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message.}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:ParamName}={{${3}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${4:ParamType} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5:The event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T ${1}<T>(this ILogger logger, ${4} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and exception factory with 1 extra argument and LogLevel"
    },
    "Define Critical LoggerMessage w/2 args": {
        "prefix": "logger-message2-c",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1:EventName}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${2:param1Name}\">${3:The first event parameter.}</param>",
            "/// <param name=\"${4:param2Name}\">${5:The second event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical,",
            "    Message = \"${6:Message}${0} (${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${7:Param1Type} ${2}, ${8:Param2Type} ${4}, Exception? exception = null);"
		],
		"description": "Create Critical Logger Error Message definition with 2 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Factory w/2 args": {
        "prefix": "logger-get-message2-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${5:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${7:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8:The second event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, ${5} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
			"    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and message factory with 2 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Exception Factory w/2 args": {
        "prefix": "logger-exception2-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${5:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${7:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8:The second event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T ${1}<T>(this ILogger logger, ${5} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);"
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and exception factory with 2 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage w/3 args": {
        "prefix": "logger-message3-c",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1:EventName}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${2:param1Name}\">${3:The first event parameter.}</param>",
            "/// <param name=\"${4:param2Name}\">${5:The second event parameter.}</param>",
            "/// <param name=\"${6:param3Name}\">${7:The third event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical,",
            "    Message = \"${8:Message}${0} (${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${6/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${6/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${9:Param1Type} ${2}, ${10:Param2Type} ${4}, ${11:Param3Type} ${6}, Exception? exception = null);"
		],
		"description": "Create Critical Logger Error Message definition with 3 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Factory w/3 args": {
        "prefix": "logger-get-message3-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}; ${5:Param3Name}={{${5}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${6:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8:Param3Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${9:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${10:The second event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The third event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, ${6} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
			"    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and message factory with 3 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Exception Factory w/3 args": {
        "prefix": "logger-exception3-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}; ${5:Param3Name}={{${5}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${6:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8:Param3Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${9:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${10:The second event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The third event parameter.}</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T Log${1}<T>(this ILogger logger, ${6} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and exception factory with 3 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage w/4 args": {
        "prefix": "logger-message4-c",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1:EventName}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${2:param1Name}\">${3:The first event parameter.}</param>",
            "/// <param name=\"${4:param2Name}\">${5:The second event parameter.}</param>",
            "/// <param name=\"${6:param3Name}\">${7:The third event parameter.}</param>",
            "/// <param name=\"${8:param4Name}\">${9:The fourth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical,",
            "    Message = \"${10:Message}${0} (${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${6/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${6/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${11:Param1Type} ${2}, ${12:Param2Type} ${4}, ${13:Param3Type} ${6}, ${14:Param4Type} ${8}, Exception? exception = null);"
		],
		"description": "Create Critical Logger Error Message definition with 4 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Factory w/4 args": {
        "prefix": "logger-get-message4-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}; ${5:Param3Name}={{${5}}}; ${6:Param4Name}={{${6}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${7:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9:Param3Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param4Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${12:The second event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The third event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The fourth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
			"public static string ${1}(this ILogger logger, ${7} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
			"    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and message factory with 4 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Exception Factory w/4 args": {
        "prefix": "logger-exception4-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
			"private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}; ${5:Param3Name}={{${5}}}; ${6:Param4Name}={{${6}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${7:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9:Param3Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param4Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${12:The second event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The third event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The fourth event parameter.}</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T Log${1}<T>(this ILogger logger, ${7} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
			"    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and exception factory with 4 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage w/5 args": {
        "prefix": "logger-message5-c",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1:EventName}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${2:param1Name}\">${3:The first event parameter.}</param>",
            "/// <param name=\"${4:param2Name}\">${5:The second event parameter.}</param>",
            "/// <param name=\"${6:param3Name}\">${7:The third event parameter.}</param>",
            "/// <param name=\"${8:param4Name}\">${9:The fourth event parameter.}</param>",
            "/// <param name=\"${10:param5Name}\">${11:The fifth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical,",
            "    Message = \"${12:Message}${0} (${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${6/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${6/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${10/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${10/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${13:Param1Type} ${2}, ${14:Param2Type} ${4}, ${15:Param3Type} ${6}, ${16:Param4Type} ${8}, ${17:Param5Type} ${10}, Exception? exception = null);"
		],
		"description": "Create Critical Logger Error Message definition with 5 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Factory w/5 args": {
        "prefix": "logger-get-message5-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
            "private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}; ${5:Param3Name}={{${5}}}; ${6:Param4Name}={{${6}}}; ${7:Param5Name}={{${7}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${8:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param3Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param4Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12:Param5Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",,
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The second event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The third event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The fourth event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The fifth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
            "public static string ${1}(this ILogger logger, ${8} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
            "    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and message factory with 5 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Exception Factory w/5 args": {
        "prefix": "logger-exception5-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
            "private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}; ${5:Param3Name}={{${5}}}; ${6:Param4Name}={{${6}}}; ${7:Param5Name}={{${7}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${8:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param3Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param4Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12:Param5Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The second event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The third event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The fourth event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The fifth event parameter.}</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T Log${1}<T>(this ILogger logger, ${8} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
            "    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and exception factory with 5 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage w/6 args": {
        "prefix": "logger-message6-c",
        "scope": "csharp",
		"body": [
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1:EventName}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${2:param1Name}\">${3:The first event parameter.}</param>",
            "/// <param name=\"${4:param2Name}\">${5:The second event parameter.}</param>",
            "/// <param name=\"${6:param3Name}\">${7:The third event parameter.}</param>",
            "/// <param name=\"${8:param4Name}\">${9:The fourth event parameter.}</param>",
            "/// <param name=\"${10:param5Name}\">${11:The fifth event parameter.}</param>",
            "/// <param name=\"${12:param6Name}\">${13:The sixth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical,",
            "    Message = \"${12:Message}${0} (${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${4/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${6/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${6/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${10/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${10/(\\s*[a-z])(.*)/${1:/upcase}$2/}}; ${12/(\\s*[a-z])(.*)/${1:/upcase}$2/}={${12/(\\s*[a-z])(.*)/${1:/upcase}$2/}})\")]",
            "public static partial void ${1}(this ILogger logger, ${15:Param1Type} ${2}, ${16:Param2Type} ${4}, ${17:Param3Type} ${6}, ${18:Param4Type} ${8}, ${19:Param5Type} ${10}, ${20:Param6Type} ${15}, Exception? exception = null);"
		],
		"description": "Create Critical Logger Error Message definition with 6 extra arguments and LogLevel"
    },
    "Define Critical LoggerMessage Factory w/6 args": {
        "prefix": "logger-get-message6-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
            "private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}; ${5:Param3Name}={{${5}}}; ${6:Param4Name}={{${6}}}; ${7:Param5Name}={{${7}}}; ${8:Param6Name}={{${8}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${9:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param3Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12:Param4Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13:Param5Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14:Param6Type} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The second event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The third event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The fourth event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${19:The fifth event parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${20:The sixth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <returns>The message string for this event.</returns>",
            "public static string ${1}(this ILogger logger, ${9} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null)",
            "{",
            "    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "    return \"{MESSAGE_${1}}.\";",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and message factory with 6 extra arguments and LogLevel."
    },
    "Define Critical LoggerMessage Exception Factory w/6 args": {
        "prefix": "logger-exception6-c",
        "scope": "csharp",
		"body": [
            "#region ${1:EventName} Logger Event Methods",
            "",
            "private const string MESSAGE_${1} = \"${2:Message}\";",
            "",
            "[LoggerMessage(EventId = (int)AppEventId.${1}, Level = LogLevel.Critical, EventName = nameof(${1}),",
            "    Message = $\"{MESSAGE_${1}}${0} (${3:Param1Name}={{${3}}}; ${4:Param2Name}={{${4}}}; ${5:Param3Name}={{${5}}}; ${6:Param4Name}={{${6}}}; ${7:Param5Name}={{${7}}}; ${8:Param6Name}={{${8}}}).\")]",
            "private static partial void Log${1}(ILogger logger, ${9:Param1Type} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10:Param2Type} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11:Param3Type} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12:Param4Type} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13:Param5Type} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14:Param6Type} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception);",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.Critical\"/> <see cref=\"AppEventId.${1}\"/> error event message.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The first event parameter.}</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The second event parameter.}</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The third event parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The fourth event parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${19:The fifth event parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${20:The sixth event parameter.}</param>",
            "/// <param name=\"factory\">Factory method to create the exception to be returned (and subsequently thrown).</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
            "/// <typeparam name=\"T\">The type of exception to be created.</typeparam>",
            "/// <returns>The exception that was created by the <paramref name=\"factory\"/> function.</returns>",
			"public static T Log${1}<T>(this ILogger logger, ${9} ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Func<string, T> factory, Exception? exception = null) where T : LoggedException",
            "{",
            "    Log${1}(logger, ${3/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
			"    return factory(MESSAGE_${1});",
            "}",
            "",
            "#endregion"
		],
		"description": "Create Critical Logger Error Message definition and exception factory with 6 extra arguments and LogLevel."
    },
    "Define Logger Scope w/no args": {
        "prefix": "logger-scope0",
        "scope": "csharp",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope(\"${2:Message}\");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger);",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with no extra arguments."
    },
    "Define Logger Scope w/1 arg": {
        "prefix": "logger-scope1",
        "scope": "csharp",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2>(",
            "    \"${3:Message} ({${4:ParamName}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5:The scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 1 extra argument."
    },
    "Define Logger Scope w/2 args": {
        "prefix": "logger-scope2",
        "scope": "csharp",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3>(",
            "   \"${4:Message} (${5:ParamName1}={${5}}; ${6:ParamName2}={${6}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${7:The first scope context parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8:The second scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 2 extra arguments."
    },
    "Define Logger Scope w/3 args": {
        "prefix": "logger-scope3",
        "scope": "csharp",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, ${4:ParamType3}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3, $4>(",
            "   \"${5:Message} (${6:ParamName1}={${6}}; ${7:ParamName2}={${7}}; ${8:ParamName3}={${8}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${9:The first scope context parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${10:The second scope context parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The third scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 3 extra arguments."
    },
    "Define Logger Scope w/4 args": {
        "prefix": "logger-scope4",
        "scope": "csharp",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, ${4:ParamType3}, ${5:ParamType4}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3, $4, $5>(",
            "   \"${6:Message} (${7:ParamName1}={${7}}; ${8:ParamName2}={${8}}; ${9:ParamName3}={${9}}; ${10:ParamName4}={${10}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The first scope context parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${12:The second scope context parameter.}</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The third scope context parameter.}</param>",
            "/// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The fourth scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 4 extra arguments."
    },
    "Define Logger Scope w/5 args": {
        "prefix": "logger-scope5",
        "scope": "csharp",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, ${4:ParamType3}, ${5:ParamType4}, ${6:ParamType5}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3, $4, $5, $6>(",
            "   \"${7:Message} (${8:ParamName1}={${8}}; ${9:ParamName2}={${9}}; ${10:ParamName3}={${10}}; ${11:ParamName3}={${11}}; ${12:ParamName3}={${12}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The first scope context parameter.}</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The second scope context parameter.}</param>",
            "/// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The third scope context parameter.}</param>",
            "/// <param name=\"${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The fourth scope context parameter.}</param>",
            "/// <param name=\"${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The fifth scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 5 extra arguments."
    },
    "Define Logger Scope w/6 args": {
        "prefix": "logger-scope6",
        "scope": "csharp",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, ${4:ParamType3}, ${5:ParamType4}, ${6:ParamType5}, ${7:ParamType6}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3, $4, $5, $6, $7>(",
            "   \"${8:Message} (${9:ParamName1}={${9}}; ${10:ParamName2}={${10}}; ${11:ParamName3}={${11}}; ${12:ParamName4}={${12}}; ${13:ParamName5}={${13}}; ${14:ParamName6}={${14}}).\");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The first scope context parameter.}</param>",
            "/// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The second scope context parameter.}</param>",
            "/// <param name=\"${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The third scope context parameter.}</param>",
            "/// <param name=\"${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The fourth scope context parameter.}</param>",
            "/// <param name=\"${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${19:The fifth scope context parameter.}</param>",
            "/// <param name=\"${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${20:The sixth scope context parameter}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7} ${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 6 extra arguments."
    },
    "Exception w/1 custom property": {
        "prefix": "exception1",
        "scope": "csharp",
        "body": [
            "/// <summary>",
            "/// Represents a ${1:Name} exception."
            "/// </summary>",
            "public class ${1}Exception : Exception",
            "{",
            "    /// <summary>",
            "    /// Gets ${2:the contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${3:PropertyType} ${4:PropertyName} { get; }",
            "",
            "    public ${1}Exception() { }",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? innerException = null) : base(null, innerException) => ${4} = ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/};",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"message\">The message that describes the error.</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, string message, Exception? innerException = null) : base(message, innerException) => ${4} = ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/};",
            "}"
        ],
        "description": "Exception with 1 custom property."
    },
    "Exception w/2 custom properties": {
        "prefix": "exception2",
        "scope": "csharp",
        "body": [
            "/// <summary>",
            "/// Represents a ${1:Name} exception."
            "/// </summary>",
            "public class ${1}Exception : Exception",
            "{",
            "    /// <summary>",
            "    /// Gets ${2:the first contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${3:Property1Type} ${4:Property1Name} { get; }",
            "",
            "    /// <summary>",
            "    /// Gets ${5:the second contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${6:Property2Type} ${7:Property2Name} { get; }",
            "",
            "    public ${1}Exception() { }",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? innerException = null) : base(null, innerException) =>",
            "        (${4}, ${7}) = (${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"message\">The message that describes the error.</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, string message, Exception? innerException = null) : base(message, innerException) =>",
            "        (${4}, ${7}) = (${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "}"
        ],
        "description": "Exception with 2 custom properties."
    },
    "Exception w/3 custom properties": {
        "prefix": "exception3",
        "scope": "csharp",
        "body": [
            "/// <summary>",
            "/// Represents a ${1:Name} exception."
            "/// </summary>",
            "public class ${1}Exception : Exception",
            "{",
            "    /// <summary>",
            "    /// Gets ${2:the first contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${3:Property1Type} ${4:Property1Name} { get; }",
            "",
            "    /// <summary>",
            "    /// Gets ${5:the second contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${6:Property2Type} ${7:Property2Name} { get; }",
            "",
            "    /// <summary>",
            "    /// Gets ${8:the third contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${9:Property3Type} ${10:Property3Name} { get; }",
            "",
            "    public ${1}Exception() { }",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? innerException = null) : base(null, innerException) =>",
            "        (${4}, ${7}) = (${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"message\">The message that describes the error.</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, string message, Exception? innerException = null) : base(message, innerException) =>",
            "        (${4}, ${7}) = (${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "}"
        ],
        "description": "Exception with 3 custom properties."
    },
    "Property and backing field": {
        "prefix": "propfull",
        "scope": "csharp",
        "body": [
            "#region ${1:PropertyName} Property",
            "",
            "private ${2:Type} _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}$0;",
            "",
            "/// <summary>",
            "/// ${3:description}",
            "/// </summary>",
            "public ${2} ${1}",
            "{",
            "    get => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/};",
            "    set => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = value;",
            "}",
            "",
            "#endregion"
        ],
        "description": "Property and backing field"
    },
    "#pragma warning disable": {
        "prefix": "pragma-warning-disable",
        "scope": "csharp",
        "body": [
            "#pragma warning disable ${1:Code}",
            "${TM_SELECTED_TEXT}$0",
            "#pragma warning restore ${1}"
        ],
        "description": "Disable Warning(s)"
    },
    "Monitor Enter/Exit": {
        "prefix": "monitor-enter-exit",
        "scope": "csharp",
        "body": [
            "Monitor.Enter(SyncRoot);",
            "try",
            "{",
            "    ${TM_SELECTED_TEXT}$0",
            "}",
            "finally { Monitor.Exit(SyncRoot); }"
        ]
    }
}
